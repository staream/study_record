---
layout: post
title: 	"7th & 8th chapter of Data analyst"
date: 	2024-10-07 00:50:17 +0900
categories: KhuDa
---

6장에서 배울 내용

1. 몇 개의 라이브러리를 이용한 최적화 계산
2. 네트워크 가시화 기술로 타당성 확인하는 방법

우리가 다룰 대상

아래와 같이 전체적인 것을 다루기 위해선

운송 최적화뿐만 아니라 네트워크 전체의 최적화가 필요하다.

<img src="image.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network"></img><br/>

고려 대상
- 제품을 판매하는 대리점
- 판매되는 상품군
- 수요량을 근거로 공장의 생산량
- 운송비, 제고 비용

#### 운송 최적화
라이브러리 : pulp, ortoolpy.

pulp : 최적화 모델을 작성
ortoolpy. : 목적함수 생성, 최적화 문제를 품

```python
import numpy as np
import pandas as pd
from itertools import product
from pulp import LpVariable, lpSum, value
from ortoolpy import model_min, addvars, addvals

# 데이터 불러오기
df_tc = pd.read_csv('trans_cost.csv', index_col="공장")
df_demand = pd.read_csv('demand.csv')
df_supply = pd.read_csv('supply.csv')

# 초기 설정  #
np.random.seed(1)
nw = len(df_tc.index)
nf = len(df_tc.columns)
pr = list(product(range(nw), range(nf)))

# 수리 모델 작성  #
m1 = model_min()
v1 = {(i,j):LpVariable('v%d_%d'%(i,j),lowBound=0) for i,j in pr}

m1 += lpSum(df_tc.iloc[i][j]*v1[i,j] for i,j in pr)
for i in range(nw):
    m1 += lpSum(v1[i,j] for j in range(nf)) <= df_supply.iloc[0][i]
for j in range(nf):
    m1 += lpSum(v1[i,j] for i in range(nw)) >= df_demand.iloc[0][j]
m1.solve()

# 총 운송 비용 계산#
df_tr_sol = df_tc.copy()
total_cost = 0
for k,x in v1.items():
    i,j = k[0],k[1]
    df_tr_sol.iloc[i][j] = value(x)
    total_cost += df_tc.iloc[i][j]*value(x)
    
print(df_tr_sol)
print("총 운송 비용:"+str(total_cost))


```

```python
m1 = model_min()
```
최소화를 실행하는 모델로 m1을 정의하고 있다.


v1
- LpVariable을 사용해서 dict로 정의 
```python
v1 = {(i,j):LpVariable('v%d_%d'%(i,j),lowBound=0) for i,j in pr}

```
목적함수m1 정의
- lpSum을 이용해서 정의
- 운송 결로의 비용 데이터(df_tc)와 v1과 요소의 곱의 합으로 정의
```python
m1 += lpSum(df_tc.iloc[i][j]*v1[i,j] for i,j in pr)
```

제약 조건 m1 정의
- 제약 조건은 lpSum을 통해 정의한다.
- 제약 조건 : 
    - 공장이 제조할 제품 소요량을 만족 
    - 창고가 제공할 부품이 제공 한계를 넘지 않게 함. 
```python
for i in range(nw):
    m1 += lpSum(v1[i,j] for j in range(nf)) <= df_supply.iloc[0][i]
for j in range(nf):
    m1 += lpSum(v1[i,j] for i in range(nw)) >= df_demand.iloc[0][j]
```

```python   
m1.solve() # 최적화 문제를 해결하는 함수 .solve()
# solve는 변수 v1이 최적화되고, 최적의 총 운송 비용이 구한다.
```

#### 최적 경로 시각화

기본 밑작업

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import networkx as nx

# 데이터 불러오기
df_tr = df_tr_sol.copy()
df_pos = pd.read_csv('trans_route_pos.csv')
```

Graph 불러오기

```python
# 객체 생성
G = nx.Graph()

# 노드 설정
for i in range(len(df_pos.columns)):
    G.add_node(df_pos.columns[i])
# df_pos의 열에 나와있는 것을 node화 시킨다.

# 엣지 설정 & 엣지의 가중치 리스트화
num_pre = 0
edge_weights = []
size = 0.1
for i in range(len(df_pos.columns)):
    for j in range(len(df_pos.columns)):
        if not (i==j):
            # 엣지 추가
            G.add_edge(df_pos.columns[i],df_pos.columns[j])
            # 엣지 가중치 추가
            if num_pre<len(G.edges):
                num_pre = len(G.edges)
                weight = 0
                if (df_pos.columns[i] in df_tr.columns)and(df_pos.columns[j] in df_tr.index):
                    if df_tr[df_pos.columns[i]][df_pos.columns[j]]:
                        weight = df_tr[df_pos.columns[i]][df_pos.columns[j]]*size
                elif(df_pos.columns[j] in df_tr.columns)and(df_pos.columns[i] in df_tr.index):
                    if df_tr[df_pos.columns[j]][df_pos.columns[i]]:
                        weight = df_tr[df_pos.columns[j]][df_pos.columns[i]]*size
                edge_weights.append(weight)
                

# 좌표 설정
pos = {}
for i in range(len(df_pos.columns)):
    node = df_pos.columns[i]
    pos[node] = (df_pos[node][0],df_pos[node][1])
    
# 그리기
nx.draw(G, pos, with_labels=True,font_size=16, node_size = 1000, node_color='k', font_color='w', width=edge_weights)

# 표시
plt.show()
```
<img src="image-1.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

추론
1. 특정 네트워크만이 활발한 교류를 보인다

##### kick!! of visualization
- 그래프를 다시 추가하는 방법에 대한 복습
- 엣지 설정 시 가중치의 리스트화의 기준이 어떻게 되는지가 중요할 것 같다.

#### plausible of constraints about optimal transport way
제약 조건을 계산하는 함수를 이용해서 계산된 운송 경로가 제약 조건을 만족하는지 확인해보자.
```python
import pandas as pd
import numpy as np

# 데이터 불러오기
df_demand = pd.read_csv('demand.csv')
df_supply = pd.read_csv('supply.csv')

# 제약조건 계산함수
# 수요측
def condition_demand(df_tr,df_demand):
    flag = np.zeros(len(df_demand.columns))
    for i in range(len(df_demand.columns)):
        temp_sum = sum(df_tr[df_demand.columns[i]])
        if (temp_sum>=df_demand.iloc[0][i]):
            flag[i] = 1
    return flag
            
# 공급측
def condition_supply(df_tr,df_supply):
    flag = np.zeros(len(df_supply.columns))
    for i in range(len(df_supply.columns)):
        temp_sum = sum(df_tr.loc[df_supply.columns[i]])
        if temp_sum<=df_supply.iloc[0][i]:
            flag[i] = 1
    return flag

print("수요 조건 계산 결과:"+str(condition_demand(df_tr_sol,df_demand)))
print("공급 조건 계산 결과:"+str(condition_supply(df_tr_sol,df_supply)))
```
결과는 수요, 공급 모두가 제약 조건이 1로 충족되고 있음을 알 수 있다.

목적함수/제약조건의 장점
- 손을 할 필요없이 간단히 비용을 계산할 수 있다.

#### 운송이 아닌 생산 계획 데이터 부르기
물류 네트워크를 위해선 운송뿐만 아니라 생산 계획도 중요한 요소이다.
![alt text](image-2.png)


```python
import pandas as pd

df_material = pd.read_csv('product_plan_material.csv', index_col="제품")
print(df_material)
df_profit = pd.read_csv('product_plan_profit.csv', index_col="제품")
print(df_profit)
df_stock = pd.read_csv('product_plan_stock.csv', index_col="항목")
print(df_stock)
df_plan = pd.read_csv('product_plan.csv', index_col="제품")
print(df_plan)

```
<img src="image-3.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

product_plan_material.csv 의 특징 
- 두 종류의 제품
- 해당 제품의 원료의 비율

product_plan_profit.csv의 특징
- 각 제품의 이익

product_plan_stock.csv의 특징
- 현재 각 원료의 재고

product_plan.csv
- 제품의 생산량

#### 이익을 계산하는 함수 만들기
생산계획 최적화(생산 최적화)의 흐름
- 목적함수/ 제약조건 정의
- 제약 조건 아래서 목적 함수를 최소화하는 **변수 조합**을 찾기

- 이익은 이익을 계산할 함수(목적함수)
- 최대화하는 변수를 찾기
```python
# 이익 계산 함수
def product_plan(df_profit,df_plan):
    profit = 0
    for i in range(len(df_profit.index)):
        for j in range(len(df_plan.columns)):
            profit += df_profit.iloc[i][j]*df_plan.iloc[i][j]
    return profit

print("총 이익:"+str(product_plan(df_profit,df_plan)))
```
생산 계획의 총 이익은

SUM(이익 * 제조량)

#### 생산 최적화 문제를 풀기


<img src="image-1.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

```python
import pandas as pd
from pulp import LpVariable, lpSum, value
from ortoolpy import model_max, addvars, addvals


df = df_material.copy()
inv = df_stock
```
```python
m = model_max()#model_max()를 선언하여 '최대화'계산 준비


v1 = {(i):LpVariable('v%d'%(i),lowBound=0) for i in range(len(df_profit))}
m += lpSum(df_profit.iloc[i]*v1[i] for i in range(len(df_profit)))
# v1을 제품 수와 같은 차원으로 정의하고, 변수 v1과 제품별 이익의 곱의 합으로 목적함수를 정의한다.


for i in range(len(df_material.columns)):
    m += lpSum(df_material.iloc[j,i]*v1[j] for j in range(len(df_profit)) ) <= df_stock.iloc[:,i]
# 각 원료의 사용량이 재고를 넘지 않게 제약 조건을 정의한다.

m.solve()# 최적화 문제를 푼다.


df_plan_sol = df_plan.copy()
for k,x in v1.items():
    df_plan_sol.iloc[k] = value(x)
print(df_plan_sol)
print("총 이익:"+str(value(m.objective)))

```

#### 생산 계획이 제약 조건을 만족하는지 확인하자
최적화 문제의 주의점
- 결과를 이해하지 않고, 받아들이는 점
    - 실제 조건이 바뀌면 기대효과를 얻을 수 없다.
    - 목적함수와 제약 조건이 현실과 다른 경우
이해하는 방법
- 제약 조건으로 규정한 것을 알아보기
    - '각 원료의 사용량' 
    - '재고를 효율적으로 이용하는가'

```python
# 제약 조건 계산 함수
def condition_stock(df_plan,df_material,df_stock):
    flag = np.zeros(len(df_material.columns))
    for i in range(len(df_material.columns)):  
        temp_sum = 0
        for j in range(len(df_material.index)):  
            temp_sum = temp_sum + df_material.iloc[j][i]*float(df_plan.iloc[j])
        if (temp_sum<=float(df_stock.iloc[0][i])):
            flag[i] = 1
        print(df_material.columns[i]+"  사용량:"+str(temp_sum)+", 재고:"+str(float(df_stock.iloc[0][i])))
    return flag

print("제약 조건 계산 결과:"+str(condition_stock(df_plan_sol,df_material,df_stock)))
```
<img src="image-4.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

결과는 제약 조건은 모두 충족됐으며 원료2와 원료3은 재고를 모두 사용한 것을 알 수 있다.

#### 물류 네트워크 설계 문제(Kick)
다룰 문제
- 물류 네트워크 = 운송 경로 + 생산 계획 최적화 문제

고려 사항
- 판매장소
- 판매되는 상품군
- 수요량에 따른 생산량
- 운송 비용과 제조 비용의 수요를 만족하면서 최소가 되게 정식화한다.

목적함수
- 운송 비용과 제조 비용의 합

제약조건
- 각 대리점의 판매 수가 수요 수를 넘는 것으로 정의

사용 도구
- 라이브러리 : ortoolpy
- 함수 : logistics_network
```python
import numpy as np
import pandas as pd

제품 = list('AB')
대리점 = list('PQ')
공장 = list('XY')
레인 = (2,2)

# 운송비 #
tbdi = pd.DataFrame(((j,k) for j in 대리점 for k in 공장), columns=['대리점','공장'])
tbdi['운송비'] = [1,2,3,1]
print(tbdi)

# 수요 #
tbde = pd.DataFrame(((j,i) for j in 대리점 for i in 제품), columns=['대리점','제품'])
tbde['수요'] = [10,10,20,20]
print(tbde)

# 생산 #
tbfa = pd.DataFrame(((k,l,i,0,np.inf) for k,nl in zip (공장,레인) for l in range(nl) for i in 제품), 
                    columns=['공장','레인','제품','하한','상한'])
tbfa['생산비'] = [1,np.nan,np.nan,1,3,np.nan,5,3]
tbfa.dropna(inplace=True)
tbfa.loc[4,'상한']=10
print(tbfa)

from ortoolpy import logistics_network
_, tbdi2, _ = logistics_network(tbde, tbdi, tbfa,dep = "대리점", dem = "수요",fac = "공장",
                                prd = "제품",tcs = "운송비",pcs = "생산비",lwb = "하한",upb = "상한")

print(tbfa)
print(tbdi2)

```

이에 대한 결과를 통해 생산표에 
- ValY라는 항목생성-> 최적 생산량이 저장
- 운송 비표에 ValX라는 항목생성-> 최적 운송량이 저장

##### Kick
이 부분에 대해 다시 공부해보기

#### 최적 네트워크의 운송 비용과 그 내역을 계산

```python

tbdi2 = tbdi2[["공장","대리점","운송비","제품","VarX","ValX"]]
tbdi2
```
![alt text](image-5.png)

내역 해석
1. 운송비용 : 80만원
2. 경로 사용 : 운송비가 적은 X->대리점 P, 공장 Y-> 대리점 Q의 경로를 사용 

#### 최적 네트워크의 생산 비용과 그 내역을 계산하자
<img src="image-1.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

```python
product_cost = 0
for i in range(len(tbfa.index)):
    product_cost += tbfa["생산비"].iloc[i]*tbfa["ValY"].iloc[i]
print("총 생산비:"+str(product_cost))
```
![alt text](image-6.png)

업무 개선에 대해 이야기



---
layout: post
title: 	"7th & 8th chapter of Data analyst"
date: 	2024-10-07 00:50:17 +0900
categories: KhuDa
---

수치 시뮬레이션으로 소비자 행동을 예측하는 테크닉 10

Preview

앞장은 최적화 수법을 이용해서 물류 사업의 경영 개선이 목적인 process를 설명했다.

- 이는 여러 상황에서 적용 가능하다.
- 조건 누락, 오류는 곧 다른 정답을 도출시킨다.
- 현실적인 한계는 조건의 설정이나 해의 검증을 보장할 수 없다.

수치 시뮬레이션
- 선택지를 넓히는 수법

수치 시뮬레이션 활용 방안
- 소비자 행동이 입소문과 interaction의 영향

전제 조건
- 연결을 나타내는 데이터 셋을 이용한다.
- 연결 : 이용의 여부도 해당한다.

#### 인간관계 네트워크 시각화
데이터 불러오기
```python
import pandas as pd

df_links = pd.read_csv("links.csv")
```
위의 데이터는 연결의 여부에 대한 관계를 기록
- 1 : 연결
- 0 : 연결 x

```python
import networkx as nx
import matplotlib.pyplot as plt

# 그래프 객체 생성
G = nx.Graph()

# 노드 설정
NUM = len(df_links.index)
for i in range(1,NUM+1):
    node_no = df_links.columns[i].strip("Node")
    G.add_node(str(node_no))

# 엣지 설정
for i in range(NUM):
    for j in range(NUM):
        node_name = "Node" + str(j)
        if df_links[node_name].iloc[i]==1:
            G.add_edge(str(i),str(j))
        
# 그리기
nx.draw_networkx(G,node_color="k", edge_color="k", font_color="w")
plt.show()
```
<img src="image-7.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

사용함수
- draw가 아닌, draw_network 사용
    - 특징 : 연결이 많은 노드는 중심으로 오게 가시화한다.

#### 입소문에 의한 정보 전파 모습 가시화

```python
import numpy as np

def determine_link(percent):
    rand_val = np.random.rand()
    if rand_val<=percent:
        return 1
    else:
        return 0


def simulate_percolation(num, list_active, percent_percolation):
    for i in range(num):
        if list_active[i]==1:
            for j in range(num):
                node_name = "Node" + str(j)
                if df_links[node_name].iloc[i]==1:
                    if determine_link(percent_percolation)==1:
                        list_active[j] = 1
    return list_active


# 입소문에 대한 setting
percent_percolation = 0.1
T_NUM = 36
NUM = len(df_links.index)
list_active = np.zeros(NUM)
list_active[0] = 1

list_timeSeries = []
for t in range(T_NUM):
    list_active = simulate_percolation(NUM, list_active, percent_percolation)
    list_timeSeries.append(list_active.copy())
```
determine_link : 
- 전파 여부를 확률적으로 결정한다.
- 인수 : 입소문을 낼 확률

simulate_percolation
- 역할 : 입소문을 시뮬레이션한다.
- 인수 : 
    - num - 사람수, 
    - list_active : 각 노드에 입소문 전달됐는지를 1또는 0으로 표현한 배열, 
    - percent_percolation : 입소문을 일으킬 확률

```python

# 액티브 노드 가시화 #
def active_node_coloring(list_active):
    #print(list_timeSeries[t])
    list_color = []
    for i in range(len(list_timeSeries[t])):
        if list_timeSeries[t][i]==1:
            list_color.append("r")
        else:
            list_color.append("k")
    #print(len(list_color))
    return list_color


# 그리기
t = 0
nx.draw_networkx(G,font_color="w",node_color=active_node_coloring(list_timeSeries[t]))
plt.show()

t =11
nx.draw_networkx(G,font_color="w",node_color=active_node_coloring(list_timeSeries[t]))
plt.show()

t = 35
nx.draw_networkx(G,font_color="w",node_color=active_node_coloring(list_timeSeries[t]))
plt.show()
```
<img src="image-8.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>


<img src="image-9.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

<img src="image-10.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

입소문이 활성화된 노드는 빨간색으로, 전파되지 않은 노드는 검은색으로 색칠하는 함수이다.

#### 입소문 수의 시계열 변화를 그래프로

```python

# 시계열 그래프 그리기
list_timeSeries_num = []
for i in range(len(list_timeSeries)):
    list_timeSeries_num.append(sum(list_timeSeries[i]))
# 열에 있는 데이터를 모두 더하여 list에 넣고 있다.

plt.plot(list_timeSeries_num)
plt.show()
```

<img src="image-11.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

#### 회원 수의 시계열 변화를 시뮬레이션해 보자

분석과 시뮬레이션를 통해 미래 예측
```python
def simulate_population(num, list_active, percent_percolation, percent_disapparence,df_links):
    # 확산 #
    for i in range(num):
        if list_active[i]==1:
            for j in range(num):
                if df_links.iloc[i][j]==1:
                    if determine_link(percent_percolation)==1:
                        list_active[j] = 1
    # 소멸 #
    for i in range(num):
        if determine_link(percent_disapparence)==1:
            list_active[i] = 0
    return list_active



percent_percolation = 0.1
percent_disapparence = 0.05
T_NUM = 100
NUM = len(df_links.index)
list_active = np.zeros(NUM)
list_active[0] = 1

list_timeSeries = []
for t in range(T_NUM):
    list_active = simulate_population(NUM, list_active, percent_percolation, percent_disapparence,df_links)
    list_timeSeries.append(list_active.copy())


# 시계열 그래프 그리기
list_timeSeries_num = []
for i in range(len(list_timeSeries)):
    list_timeSeries_num.append(sum(list_timeSeries[i]))

plt.plot(list_timeSeries_num)
plt.show()

```
simulate_population 함수
- 입소문 전파 
- '소멸' (회원 탈퇴)

<img src="image-12.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

소멸 확률을 0.2로 한 경우
<img src="image-13.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

#### 파라미터 전체를 '상관관계'를 보면서 파악
입소문의 전파와 이용 중단의 확률
- 상품이나 서비스의 성질에 따라 달라진다.
- 캠페인의 유무에 따라 달라짐.

상품의 보급
- 전파나 중단의 확률에 따라 달라짐
```python
# 상관관계 계산
print("상관관계 계산시작")
T_NUM = 100
NUM_PhaseDiagram = 20
phaseDiagram = np.zeros((NUM_PhaseDiagram,NUM_PhaseDiagram))
for i_p in range(NUM_PhaseDiagram):
    for i_d in range(NUM_PhaseDiagram):
        percent_percolation = 0.05*i_p
        percent_disapparence = 0.05*i_d
        list_active = np.zeros(NUM)
        list_active[0] = 1
        for t in range(T_NUM):
            list_active = simulate_population(NUM, list_active, percent_percolation, percent_disapparence,df_links)
        phaseDiagram[i_p][i_d] = sum(list_active)
print(phaseDiagram)
```

```python

# 표시
plt.matshow(phaseDiagram)
plt.colorbar(shrink=0.8)
plt.xlabel('percent_disapparence')
plt.ylabel('percent_percolation')
plt.xticks(np.arange(0.0, 20.0,5), np.arange(0.0, 1.0, 0.25))
plt.yticks(np.arange(0.0, 20.0,5), np.arange(0.0, 1.0, 0.25))
plt.tick_params(bottom=False,
                left=False,
                right=False,
                top=False)
plt.show()
```

<img src="image-14.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

추론
- 소멸 확률이 20~30%를 넘으면 입소문 확률이 높더라도 이용자는 증가하지 않는 모습을 볼 수 있다.

#### 실제 데이터를 불러와보자

```python
import pandas as pd

df_mem_links = pd.read_csv("links_members.csv")
# 540명 각각이 SNS 연결 여부
df_mem_info = pd.read_csv("info_members.csv")
# 24개월간 이용 현황 -> 이용 달 : 1
```

#### 링크 수의 분포 가시화
링크 수 파악의 필요성

- 이전처럼 네트워크 가시화도 가능하다.
- 규모의 측면에선 네트워크를 가시화해도
- 노드의 밀집으로 상황 파악이 어렵다.
```python
NUM = len(df_mem_links.index)
array_linkNum = np.zeros(NUM)
for i in range(NUM):
    array_linkNum[i] = sum(df_mem_links["Node"+str(i)])

plt.hist(array_linkNum, bins=10,range=(0,250))
plt.show()
```
<img src="image-15.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>
Matplotlib의 hist함수로 링크 개수의 히스토그램을 표시한다.

그래프는 링크 개수가 대략 100 정도에 집중된 정규분포에 가까운 모습이다.

스케일 프리형
- 허브(링크 많음)가 작동하지 않으면, 중간에 퍼지지 않는다.
    - 이에 대해 거의 모든 노드가 어느 정도의 링크 수를 가지고 있기에 '허브에 의존하지 않고 입소문이 퍼지기 쉽다'라고 말할 수 있다.

#### 실제 데이터로부터 파라미터 추정
추정한 확률중에서 소멸확률
- 활성이 비활성으로 변하는 비율을 세어보면 추정가능

입소문이 전파되는 확률
- 정확히 알 수 없으니, 일단 밑의 코드처럼 중복하여 세지 않게 한 것
```python
NUM = len(df_mem_info.index)
T_NUM = len(df_mem_info.columns)-1
# 소멸 확률 추정 #
count_active = 0
count_active_to_inactive = 0
for t in range(1,T_NUM):
    for i in range(NUM):
        if (df_mem_info.iloc[i][t]==1):
            count_active_to_inactive += 1
            if (df_mem_info.iloc[i][t+1]==0):
                count_active += 1
estimated_percent_disapparence = count_active/count_active_to_inactive



# 확산 확률 추정 #
count_link = 0
count_link_to_active = 0
count_link_temp = 0
for t in range(T_NUM-1):
    df_link_t = df_mem_info[df_mem_info[str(t)]==1]
    temp_flag_count = np.zeros(NUM)
    for i in range(len(df_link_t.index)):
        df_link_temp = df_mem_links[df_mem_links["Node"+str(df_link_t.index[i])]==1]
        for j in range(len(df_link_temp.index)):
            if (df_mem_info.iloc[df_link_temp.index[j]][t]==0):
                if (temp_flag_count[df_link_temp.index[j]]==0):
                    count_link += 1
                if (df_mem_info.iloc[df_link_temp.index[j]][t+1]==1):
                    if (temp_flag_count[df_link_temp.index[j]]==0):
                        temp_flag_count[df_link_temp.index[j]] = 1 
                        count_link_to_active += 1
estimated_percent_percolation = count_link_to_active/count_link
```
##### kick ? code is so hard

#### 실제 데이터와 시뮬레이션 비교
<img src="image-13.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>
<img src="image-13.png" width="px" height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

```python

percent_percolation = 0.025184661323275185
percent_disapparence = 0.10147163541419416
T_NUM = 24
NUM = len(df_mem_links.index)
list_active = np.zeros(NUM)
list_active[0] = 1
list_timeSeries = []
for t in range(T_NUM):
    list_active = simulate_population(NUM, list_active, percent_percolation, percent_disapparence,df_mem_links)
    list_timeSeries.append(list_active.copy())

list_timeSeries_num = []
for i in range(len(list_timeSeries)):
    list_timeSeries_num.append(sum(list_timeSeries[i]))

list_timeSeries_num = []
for i in range(len(list_timeSeries)):
    list_timeSeries_num.append(sum(list_timeSeries[i]))


plt.plot(list_timeSeries_num, label = 'simulated')
plt.plot(list_timeSeries_num_real, label = 'real')
plt.xlabel('month')
plt.ylabel('population')
plt.legend(loc='lower right')
plt.show()
```
![alt text](image-16.png)
height="250px" title="px(픽셀) 크기 설정" alt="network_visualization"></img><br/>

위의 코드는 시뮬레이션에 의한 이용자 수와 실제 데이터가 비슷하게 움직는 것을 확인 수 있다.

주의
- 시간에 따른 
- 증가할 때는 3~5개월에 이르게 증가하거나 늦게 증가하거나 경우가 있어, 오차가 생긴다.

#### 시뮬레이션으로 미래 예측


```python

percent_percolation = 0.025184661323275185
percent_disapparence = 0.10147163541419416
T_NUM = 36
NUM = len(df_mem_links.index)
list_active = np.zeros(NUM)
list_active[0] = 1
list_timeSeries = []
for t in range(T_NUM):
    list_active = simulate_population(NUM, list_active, percent_percolation, percent_disapparence,df_mem_links)
    list_timeSeries.append(list_active.copy())

list_timeSeries_num = []
for i in range(len(list_timeSeries)):
    list_timeSeries_num.append(sum(list_timeSeries[i]))

plt.plot(list_timeSeries_num, label = 'simulated')
plt.xlabel('month')
plt.ylabel('population')
plt.legend(loc='lower right')
plt.show()
```
![alt text](image-17.png)

24개월 이후엔 '평범한 결과'라고 보이지만, 중요한 것은 population이 급격히 할 수 있는 지

시뮬레이션은 사전에 생길수 있는 문제를 알 수 있기에
